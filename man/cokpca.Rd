% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cokpca.R
\name{cokpca}
\alias{cokpca}
\title{Co-Kurtosis PCA}
\usage{
cokpca(
  df,
  k = NULL,
  alpha = NULL,
  center = TRUE,
  scale = TRUE,
  method = "linear",
  epochs = 100,
  batch_size = 32,
  set_seed = 1234,
  hidden_layers = list(list(units = 40, activation = "tanh"), list(units = 64, activation
    = "tanh"), list(units = 40, activation = "tanh"), list(units = 32, activation =
    "tanh")),
  learning_rate = 0.001,
  output_activation = NULL
)
}
\arguments{
\item{df}{A matrix or dataframe of input data.}

\item{k}{(Optional) Number of principal components to retain in reduction.}

\item{alpha}{(Optional) Cumulative contribution ratio to determine the number of components.}

\item{center}{Logical indicating whether to center the data before scaling. Default is `TRUE`.}

\item{scale}{Logical indicating whether to scale the data to unit variance. Default is `TRUE`.}

\item{method}{Method for reconstruction: `"linear"` or `"ann"`. Default is `"linear"`.}

\item{epochs}{Number of epochs for ANN training (default is `100`).}

\item{batch_size}{Batch size for ANN training (default is `32`).}

\item{set_seed}{The random seed for ANN model reproducibility. Default is `1234`.}

\item{hidden_layers}{A list of named lists, where each named list specifies:
\describe{
  \item{\code{units}}{An integer specifying the number of units in the layer.}
  \item{\code{activation}}{A string specifying the activation function for the layer (e.g., \code{"tanh"}, \code{"relu"}, etc.).}
}
The default configuration includes:
\enumerate{
  \item Dense layer with 40 units and \code{"tanh"} activation.
  \item Dense layer with 64 units and \code{"tanh"} activation.
  \item Dense layer with 40 units and \code{"tanh"} activation.
  \item Dense layer with 32 units and \code{"tanh"} activation.
}}

\item{learning_rate}{A numeric value specifying the learning rate for the ANN optimizer. Default is `0.001`.}

\item{output_activation}{A string specifying the activation function for the output layer (e.g., \code{"sigmoid"}, \code{"tanh"}, or \code{NULL} for no activation). Default is `NULL`.}
}
\value{
A list containing:
\describe{
  \item{scores}{Principal component scores matrix.}
  \item{loadings}{Matrix of principal component loadings.}
  \item{k}{The number of principal components selected.}
  \item{alpha}{The cumulative contribution ratio achieved with the selected `k` components.}
  \item{reconstructed_data}{Reconstructed data matrix.}
  \item{individual_contribution}{Individual contribution ratios of each principal component.}
  \item{cumulative_contribution}{Cumulative contribution ratios up to each principal component.}
  \item{ann_model}{(Optional) The trained ANN model if `method` is `"ann"`.}
  \item{training_history}{(Optional) The training history of the ANN model if `method` is `"ann"`.}
}
}
\description{
Performs Co-Kurtosis PCA on the provided dataset with options for data standardization and reconstruction methods (linear or ANN).
}
\details{
This function performs dimensionality reduction using Co-Kurtosis PCA and provides options for reconstruction via a linear method or an Artificial Neural Network (ANN). When using the ANN reconstruction method, users can customize the architecture by defining the number and configuration of hidden layers, the optimizer learning rate, and the output layer activation function.

If the `linear` reconstruction method is chosen, the function performs simple linear reconstruction using the principal component scores and loadings.

If the `ann` reconstruction method is chosen, the function requires the \code{keras3} package. Ensure \code{keras3} is installed before running the function.
}
\note{
If `method = "ann"`, this function uses the \code{keras3} package for ANN reconstruction. If \code{keras3} is not installed, please install it using:
\code{install.packages("keras3")}.
Alternatively, you may use \code{method = "linear"} for reconstruction without requiring \code{keras3}.
}
\examples{
# Example 1: Using linear reconstruction
df =  matrix(rnorm(100), nrow = 20, ncol = 5)
result = cokpca(df, k = 2, center = TRUE, scale = TRUE, method = "linear")

# Example 2: Using ANN reconstruction with default ANN parameters
result = cokpca(df, k = 2, center = TRUE, scale = TRUE, method = "ann")

# Example 3: Using ANN reconstruction with a custom architecture and parameters
result = cokpca(
  df = df, k = 2, center = TRUE, scale = TRUE, method = "ann",
  hidden_layers = list(
    list(units = 128, activation = "relu"),
    list(units = 64, activation = "relu")
  ),
  learning_rate = 0.0001,
  output_activation = "tanh",
  epochs = 50,
  batch_size = 64
)
}
